{"version":3,"sources":["dda/c4k_common/postgres.cljc"],"mappings":"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","names":["dda.c4k-common.postgres/postgres-size?","input","cljs.core/contains?","dda.c4k-common.postgres/postgres-image?","cljs.spec.alpha/def-impl","dda.c4k-common.predicate/bash-env-string?","cljs.core/string?","dda.c4k-common.predicate/pvc-storage-class-name?","cljs.core/pos?","dda.c4k-common.postgres/pg-config?","cljs.spec.alpha/map-spec-impl","G__6167","cljs.core/map?","dda.c4k-common.postgres/pg-auth?","G__6169","dda.c4k-common.postgres/postgres-function","G__6170","dda.c4k-common.yaml/load-resource","resource-name","G__6171","js/Error","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","dda.c4k-common.postgres/generate-config","seq6176","self__5755__auto__","cljs.core/seq","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","dda.c4k-common.predicate/map-or-seq?","config","cljs.spec.alpha/maybe-impl","map__6180","cljs.core/--destructure-map","cljs.core.get","postgres-size","db-name","cljs.core/first","dda.c4k-common.yaml/from-string","cljs.core/name","cljs.core/assoc-in","dda.c4k-common.postgres/generate-deployment","seq6184","map__6185","postgres-image","dda.c4k-common.postgres/generate-persistent-volume","map__6188","postgres-data-volume-path","pv-storage-size-gb","dda.c4k-common.postgres/generate-pvc","map__6191","pvc-storage-class-name","dda.c4k-common.postgres/generate-secret","my-auth","cljs.core/any?","map__6195","postgres-db-user","postgres-db-password","dda.c4k-common.common/replace-key-value","dda.c4k-common.base64/encode","dda.c4k-common.postgres/generate-service"],"sourcesContent":["(ns dda.c4k-common.postgres\n  (:require\n   [clojure.spec.alpha :as s]\n   #?(:cljs [shadow.resource :as rc])\n   #?(:clj [orchestra.core :refer [defn-spec]]\n      :cljs [orchestra.core :refer-macros [defn-spec]])\n   [dda.c4k-common.yaml :as yaml]\n   [dda.c4k-common.base64 :as b64]\n   [dda.c4k-common.predicate :as cp]\n   [dda.c4k-common.common :as cm]))\n\n(defn postgres-size?\n  [input]\n  (contains? #{:2gb :4gb :8gb :16gb} input))\n\n(defn postgres-image?\n  [input]\n  (contains? #{\"postgres:13\" \"postgres:14\"} input))\n\n(s/def ::postgres-db-user cp/bash-env-string?)\n(s/def ::postgres-db-password cp/bash-env-string?)\n(s/def ::postgres-data-volume-path string?)\n(s/def ::postgres-size postgres-size?)\n(s/def ::db-name cp/bash-env-string?)\n(s/def ::pvc-storage-class-name cp/pvc-storage-class-name?)\n(s/def ::pv-storage-size-gb pos?)\n\n(def pg-config?\n  (s/keys :opt-un [::postgres-size ::db-name ::postgres-data-volume-path\n                   ::pvc-storage-class-name ::pv-storage-size-gb]))\n(def pg-auth?\n  (s/keys :opt-un [::postgres-db-user ::postgres-db-password]))\n\n(def postgres-function (s/keys :opt-un [::deserializer ::optional]))\n\n#?(:cljs\n   (defmethod yaml/load-resource :postgres [resource-name]\n     (case resource-name\n       \"postgres/config-2gb.yaml\" (rc/inline \"postgres/config-2gb.yaml\")\n       \"postgres/config-4gb.yaml\" (rc/inline \"postgres/config-4gb.yaml\")\n       \"postgres/config-8gb.yaml\" (rc/inline \"postgres/config-8gb.yaml\")\n       \"postgres/config-16gb.yaml\" (rc/inline \"postgres/config-16gb.yaml\")\n       \"postgres/deployment.yaml\" (rc/inline \"postgres/deployment.yaml\")\n       \"postgres/persistent-volume.yaml\" (rc/inline \"postgres/persistent-volume.yaml\")\n       \"postgres/pvc.yaml\" (rc/inline \"postgres/pvc.yaml\")\n       \"postgres/secret.yaml\" (rc/inline \"postgres/secret.yaml\")\n       \"postgres/service.yaml\" (rc/inline \"postgres/service.yaml\")\n       (throw (js/Error. \"Undefined Resource!\")))))\n\n(defn-spec generate-config cp/map-or-seq?\n  [& config (s/? pg-config?)]\n  (let [{:keys [postgres-size db-name]\n         :or {postgres-size :2gb\n              db-name \"postgres\"}} (first config)]\n    (->\n     (yaml/from-string (yaml/load-resource\n                        (str \"postgres/config-\" (name postgres-size) \".yaml\")))\n     (assoc-in [:data :postgres-db] db-name))))\n\n; TODO: why do we need a sequence of configs?\n(defn-spec generate-deployment cp/map-or-seq?\n  [& config (s/? pg-config?)]\n  (let [{:keys [postgres-image]\n         :or {postgres-image \"postgres:13\"}} (first config)]\n    (->\n     (yaml/from-string (yaml/load-resource \"postgres/deployment.yaml\"))\n     (assoc-in [:spec :template :spec :containers 0 :image] postgres-image))))\n\n(defn-spec generate-persistent-volume cp/map-or-seq?\n  [config pg-config?]\n  (let [{:keys [postgres-data-volume-path pv-storage-size-gb] \n         :or {postgres-data-volume-path \"/var/postgres\"\n              pv-storage-size-gb 10}} config]\n    (->\n     (yaml/from-string (yaml/load-resource \"postgres/persistent-volume.yaml\"))\n     (assoc-in [:spec :hostPath :path] postgres-data-volume-path)\n     (assoc-in [:spec :capacity :storage] (str pv-storage-size-gb \"Gi\")))))\n\n(defn-spec generate-pvc cp/map-or-seq? \n  [config pg-config?]\n  (let [{:keys [pv-storage-size-gb pvc-storage-class-name] \n         :or {pv-storage-size-gb 10\n              pvc-storage-class-name \"manual\"}} config]\n  (-> \n   (yaml/from-string (yaml/load-resource \"postgres/pvc.yaml\"))\n   (assoc-in [:spec :resources :requests :storage] (str pv-storage-size-gb \"Gi\"))\n   (assoc-in [:spec :storageClassName] (name pvc-storage-class-name)))))\n\n(defn-spec generate-secret cp/map-or-seq? \n  [my-auth any?]\n  (let [{:keys [postgres-db-user postgres-db-password]} my-auth]\n    (->\n     (yaml/from-string (yaml/load-resource \"postgres/secret.yaml\"))\n     (cm/replace-key-value :postgres-user (b64/encode postgres-db-user))\n     (cm/replace-key-value :postgres-password (b64/encode postgres-db-password)))))\n\n(defn-spec generate-service cp/map-or-seq? \n  []\n  (yaml/from-string (yaml/load-resource \"postgres/service.yaml\")))\n"]}