{"version":3,"sources":["hickory/render.cljc"],"mappings":"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","names":["hickory.render/render-hickory-attribute","m","cljs.core/name","cljs.core/key","hickory.utils/html-escape","cljs.core/val","hickory.render/hickory-to-html","dom","e10904","G__10915","cljs.core/Keyword","js/Error","cljs.core.apply","cljs.core/str","cljs.core.map","hickory.utils/render-doctype","cljs.core.get_in","G__10916","hickory.utils/void-element","G__10917","hickory.utils/unescapable-content","e","hickory.utils/starts-with","cljs.core.ex_info","cljs.core.pr_str","hickory.render/render-hiccup-attrs","attrs","attrs-str","iter__5523__auto__","s__10920","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__10922","cljs.core/chunk-buffer","i__10921","vec__10923","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__10919","cljs.core/chunk-rest","vec__10926","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","p1__10918#","cljs.core.filter","cljs.core/empty?","cljs.core.sort","clojure.string.join","hickory.render/render-hiccup-element","n-element","vec__10930","seq__10931","first__10932","cljs.core/next","tag","content","hickory.render/hiccup-to-html","hickory.render/render-hiccup-form","n-form","cljs.core/vector?","hiccup-forms","p1__10936#","hickory.hiccup-utils/normalize-form","cljs.core/chunk-first"],"sourcesContent":["(ns hickory.render\n  (:require [hickory.hiccup-utils :as hu]\n            [hickory.utils :as utils]\n            [clojure.string :as str]))\n\n;;\n;; Hickory to HTML\n;;\n\n(defn- render-hickory-attribute\n  \"Given a map entry m, representing the attribute name and value, returns a\n   string representing that key/value pair as it would be rendered into HTML.\"\n  [m]\n  (str \" \" (name (key m)) \"=\\\"\" (utils/html-escape (val m)) \"\\\"\"))\n\n(defn hickory-to-html\n  \"Given a hickory HTML DOM map structure (as returned by as-hickory), returns a\n   string containing HTML it represents. Keep in mind this function is not super\n   fast or heavy-duty.\n\n   Note that it will NOT in general be the case that\n\n     (= my-html-src (hickory-to-html (as-hickory (parse my-html-src))))\n\n   as we do not keep any letter case or whitespace information, any\n   \\\"tag-soupy\\\" elements, attribute quote characters used, etc.\"\n  [dom]\n  (if (string? dom)\n    (utils/html-escape dom)\n    (try\n      (case (:type dom)\n        :document\n        (apply str (map hickory-to-html (:content dom)))\n        :document-type\n        (utils/render-doctype (get-in dom [:attrs :name])\n                              (get-in dom [:attrs :publicid])\n                              (get-in dom [:attrs :systemid]))\n        :element\n        (cond\n         (utils/void-element (:tag dom))\n         (str \"<\" (name (:tag dom))\n              (apply str (map render-hickory-attribute (:attrs dom)))\n              \">\")\n         (utils/unescapable-content (:tag dom))\n         (str \"<\" (name (:tag dom))\n              (apply str (map render-hickory-attribute (:attrs dom)))\n              \">\"\n              (apply str (:content dom)) ;; Won't get html-escaped.\n              \"</\" (name (:tag dom)) \">\")\n         :else\n         (str \"<\" (name (:tag dom))\n              (apply str (map render-hickory-attribute (:attrs dom)))\n              \">\"\n              (apply str (map hickory-to-html (:content dom)))\n              \"</\" (name (:tag dom)) \">\"))\n        :comment\n        (str \"<!--\" (apply str (:content dom)) \"-->\"))\n      (catch #?(:clj  IllegalArgumentException\n                :cljs js/Error) e\n        (throw\n          (if (utils/starts-with #?(:clj (.getMessage e) :cljs (aget e \"message\")) \"No matching clause: \")\n            (ex-info (str \"Not a valid node: \" (pr-str dom)) {:dom dom})\n            e))))))\n\n;;\n;; Hiccup to HTML\n;;\n\n(defn- render-hiccup-attrs\n  \"Given a hiccup attribute map, returns a string containing the attributes\n   rendered as they should appear in an HTML tag, right after the tag (including\n   a leading space to separate from the tag, if any attributes present).\"\n  [attrs]\n  ;; Hiccup normally does not html-escape strings, but it does for attribute\n  ;; values.\n  (let [attrs-str (->> (for [[k v] attrs]\n                         (cond (true? v)\n                               (str (name k))\n                               (nil? v)\n                               \"\"\n                               :else\n                               (str (name k) \"=\" \"\\\"\" (utils/html-escape v) \"\\\"\")))\n                       (filter #(not (empty? %)))\n                       sort\n                       (str/join \" \"))]\n    (if (not (empty? attrs-str))\n      ;; If the attrs-str is not \"\", we need to pad the front so that the\n      ;; tag will separate from the attributes. Otherwise, \"\" is fine to return.\n      (str \" \" attrs-str)\n      attrs-str)))\n\n(declare hiccup-to-html)\n(defn- render-hiccup-element\n  \"Given a normalized hiccup element (such as the output of\n   hickory.hiccup-utils/normalize-form; see this function's docstring\n   for more detailed definition of a normalized hiccup element), renders\n   it to HTML and returns it as a string.\"\n  [n-element]\n  (let [[tag attrs & content] n-element]\n    (if (utils/void-element tag)\n      (str \"<\" (name tag) (render-hiccup-attrs attrs) \">\")\n      (str \"<\" (name tag) (render-hiccup-attrs attrs) \">\"\n           (hiccup-to-html content)\n           \"</\" (name tag) \">\"))))\n\n(defn- render-hiccup-form\n  \"Given a normalized hiccup form (such as the output of\n   hickory.hiccup-utils/normalize-form; see this function's docstring\n   for more detailed definition of a normalized hiccup form), renders\n   it to HTML and returns it as a string.\"\n  [n-form]\n  (if (vector? n-form)\n    (render-hiccup-element n-form)\n    n-form))\n\n(defn hiccup-to-html\n  \"Given a sequence of hiccup forms (as returned by as-hiccup), returns a\n   string containing HTML it represents. Keep in mind this function is not super\n   fast or heavy-duty, and definitely not a replacement for dedicated hiccup\n   renderers, like hiccup itself, which *is* fast and heavy-duty.\n\n```klipse\n  (hiccup-to-html '([:html {} [:head {}] [:body {} [:a {} \\\"foo\\\"]]]))\n```\n\n   Note that it will NOT in general be the case that\n\n     (= my-html-src (hiccup-to-html (as-hiccup (parse my-html-src))))\n\n   as we do not keep any letter case or whitespace information, any\n   \\\"tag-soupy\\\" elements, attribute quote characters used, etc. It will also\n   not generally be the case that this function's output will exactly match\n   hiccup's.\n   For instance:\n\n```klipse\n(hiccup-to-html (as-hiccup (parse \\\"<A href=\\\\\\\"foo\\\\\\\">foo</A>\\\")))\n```\n  \"\n  [hiccup-forms]\n  (apply str (map #(render-hiccup-form (hu/normalize-form %)) hiccup-forms)))\n\n"]}