{"version":3,"sources":["dda/c4k_gitea/core.cljc"],"mappings":"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","names":["dda.c4k-gitea.core/config-defaults","dda.c4k-gitea.core/config?","cljs.spec.alpha/map-spec-impl","G__10460","cljs.core/map?","cljs.core/contains?","dda.c4k-gitea.core/auth?","G__10483","dda.c4k-gitea.core/vol?","G__10518","dda.c4k-gitea.core/k8s-objects","config","storage-class","cljs.core.map","dda.c4k-common.yaml/to-string","p1__10532#","cljs.core.filter","dda.c4k_common.common.concat_vec","dda.c4k_common.postgres.generate_config","dda.c4k-common.postgres/generate-secret","dda.c4k-common.postgres/generate-persistent-volume","cljs.core/select-keys","dda.c4k-common.postgres/generate-pvc","dda.c4k_common.postgres.generate_deployment","dda.c4k-common.postgres/generate-service","dda.c4k-gitea.gitea/generate-deployment","dda.c4k-gitea.gitea/generate-service","dda.c4k-gitea.gitea/generate-service-ssh","dda.c4k-gitea.gitea/generate-data-volume","dda.c4k-gitea.gitea/generate-appini-env","dda.c4k-gitea.gitea/generate-secrets","dda.c4k-gitea.gitea/generate-ingress","dda.c4k-gitea.gitea/generate-certificate","dda.c4k-gitea.backup/generate-config","dda.c4k-gitea.backup/generate-secret","dda.c4k-gitea.backup/generate-cron","dda.c4k-gitea.backup/generate-backup-restore-deployment"],"sourcesContent":["(ns dda.c4k-gitea.core\n (:require\n  [clojure.spec.alpha :as s]\n  [dda.c4k-common.yaml :as yaml]\n  [dda.c4k-common.common :as cm]\n  [dda.c4k-gitea.gitea :as gitea]\n  [dda.c4k-gitea.backup :as backup]\n  [dda.c4k-common.postgres :as postgres]))\n\n(def config-defaults {:issuer \"staging\"})\n\n(def config? (s/keys :req-un [::gitea/fqdn \n                              ::gitea/mailer-from \n                              ::gitea/mailer-host-port \n                              ::gitea/service-noreply-address]\n                     :opt-un [::gitea/issuer \n                              ::gitea/default-app-name \n                              ::gitea/service-domain-whitelist\n                              ::backup/restic-repository]))\n\n(def auth? (s/keys :req-un [::postgres/postgres-db-user ::postgres/postgres-db-password\n                            ::gitea/mailer-user ::gitea/mailer-pw\n                            ::backup/aws-access-key-id ::backup/aws-secret-access-key]\n                   :opt-un [::backup/restic-password])) ; TODO gec: Is restic password opt or req?\n\n(def vol? (s/keys :req-un [::gitea/volume-total-storage-size]))\n\n(defn k8s-objects [config]\n  (let [storage-class (if (contains? config :postgres-data-volume-path) :manual :local-path)]\n    (map yaml/to-string\n         (filter #(not (nil? %))\n                 (cm/concat-vec\n                  [(postgres/generate-config {:postgres-size :2gb :db-name \"gitea\"})\n                   (postgres/generate-secret config)\n                   (when (contains? config :postgres-data-volume-path)\n                     (postgres/generate-persistent-volume (select-keys config [:postgres-data-volume-path :pv-storage-size-gb])))\n                   (postgres/generate-pvc {:pv-storage-size-gb 5\n                                           :pvc-storage-class-name storage-class})\n                   (postgres/generate-deployment {:postgres-image \"postgres:14\"\n                                                  :postgres-size :2gb})\n                   (postgres/generate-service)\n                   (gitea/generate-deployment)\n                   (gitea/generate-service)\n                   (gitea/generate-service-ssh)                   \n                   (gitea/generate-data-volume config)\n                   (gitea/generate-appini-env config)\n                   (gitea/generate-secrets config)\n                   (gitea/generate-ingress config)\n                   (gitea/generate-certificate config)]\n                  (when (contains? config :restic-repository)\n                    [(backup/generate-config config)\n                     (backup/generate-secret config)\n                     (backup/generate-cron)\n                     (backup/generate-backup-restore-deployment config)]))))))\n"]}