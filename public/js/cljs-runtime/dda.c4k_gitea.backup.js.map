{"version":3,"sources":["dda/c4k_gitea/backup.cljc"],"mappings":";AAQA,AAAAA,yBAAA,AAAA,qHAAA,AAAA,2HAA2BC;AAC3B,AAAAD,yBAAA,AAAA,8HAAA,AAAA,2HAA+BC;AAC/B,AAAAD,yBAAA,AAAA,iHAAA,AAAA,2HAAyBC;AACzB,AAAAD,yBAAA,AAAA,uHAAA,AAAA,2HAA2BC;AAGxB,AAAAC,8EAAA,uDAAA,WAAuCC;AAAvC,AACE,IAAAC,WAAMD;AAAN,AAAA,QAAAC;KAAA;AACuB;;;KADvB;AAEqB;;;KAFrB;AAGuB;;;KAHvB;AAI0C;;;;AACxC,MAAO,KAAAC,MAAA;;;;AAEd,uCAAA,vCAAMC,sFAAiBC;AAAvB,AACE,IAAAC,aAAkCD;IAAlCC,iBAAA,AAAAC,4BAAAD;wBAAA,AAAAE,4CAAAF,eAAA,/EAAcG;AAAd,+CAEG,AAACC,gCAAiB,gEAAA,hEAACV,/EACnB,sKAAA,/JAACW,6OAAwCF;;AAE9C,qCAAA,rCAAMG;AAAN,AACG,OAACF,gCAAiB,gEAAA,hEAACV;;AAEtB,0DAAA,1DAAMa,4HAAoCR;AAA1C,AACE,IAAMS,sBAAoB,AAACJ,gCAAiB,gEAAA,hEAACV;AAA7C,AACE,GAAI,EAAK,kCAAA,lCAACe,0BAAUV,uGAAiC,6CAAA,7CAACW,kDAAO,AAAA,uHAAyBX;AACpF,qEAAA,mBAAA,jFAACY,0CAAuBH;;AACxBA;;;AAEN,uCAAA,vCAAMI,sFAAiBC;AAAvB,AACE,IAAAC,aAAwED;IAAxEC,iBAAA,AAAAb,4BAAAa;wBAAA,AAAAZ,4CAAAY,eAAA,/EAAcC;4BAAd,AAAAb,4CAAAY,eAAA,nFAAgCE;sBAAhC,AAAAd,4CAAAY,eAAA,7EAAsDG;AAAtD,+HAEG,AAACb,gCAAiB,gEAAA,hEAACV,xEACnB,+JAAA,/JAACW,+OAAwC,AAACa,6BAAWH,pTACrD,wUAAA,xUAACV,+ZAA4C,AAACa,6BAAWF,3eACzD,mgBAAA,5fAACX,wkBAAsC,AAACa,6BAAWD","names":["cljs.spec.alpha/def-impl","dda.c4k-common.common/bash-env-string?","dda.c4k-common.yaml/load-resource","resource-name","G__10200","js/Error","dda.c4k-gitea.backup/generate-config","my-conf","map__10230","cljs.core/--destructure-map","cljs.core.get","restic-repository","dda.c4k-common.yaml/from-string","dda.c4k-common.common/replace-key-value","dda.c4k-gitea.backup/generate-cron","dda.c4k-gitea.backup/generate-backup-restore-deployment","backup-restore-yaml","cljs.core/contains?","cljs.core._EQ_","dda.c4k-common.common/replace-named-value","dda.c4k-gitea.backup/generate-secret","my-auth","map__10243","aws-access-key-id","aws-secret-access-key","restic-password","dda.c4k-common.base64/encode"],"sourcesContent":["(ns dda.c4k-gitea.backup\n (:require\n  [clojure.spec.alpha :as s]\n  #?(:cljs [shadow.resource :as rc])\n  [dda.c4k-common.yaml :as yaml]\n  [dda.c4k-common.base64 :as b64]\n  [dda.c4k-common.common :as cm]))\n\n(s/def ::aws-access-key-id cm/bash-env-string?)\n(s/def ::aws-secret-access-key cm/bash-env-string?)\n(s/def ::restic-password cm/bash-env-string?)\n(s/def ::restic-repository cm/bash-env-string?)\n\n#?(:cljs\n   (defmethod yaml/load-resource :backup [resource-name]\n     (case resource-name\n       \"backup/config.yaml\" (rc/inline \"backup/config.yaml\")\n       \"backup/cron.yaml\" (rc/inline \"backup/cron.yaml\")\n       \"backup/secret.yaml\" (rc/inline \"backup/secret.yaml\")\n       \"backup/backup-restore-deployment.yaml\" (rc/inline \"backup/backup-restore-deployment.yaml\")\n       (throw (js/Error. \"Undefined Resource!\")))))\n\n(defn generate-config [my-conf]\n  (let [{:keys [restic-repository]} my-conf]\n    (->\n     (yaml/from-string (yaml/load-resource \"backup/config.yaml\"))\n     (cm/replace-key-value :restic-repository restic-repository))))\n\n(defn generate-cron []\n   (yaml/from-string (yaml/load-resource \"backup/cron.yaml\")))\n\n(defn generate-backup-restore-deployment [my-conf]\n  (let [backup-restore-yaml (yaml/from-string (yaml/load-resource \"backup/backup-restore-deployment.yaml\"))]\n    (if (and (contains? my-conf :local-integration-test) (= true (:local-integration-test my-conf)))\n      (cm/replace-named-value backup-restore-yaml \"CERTIFICATE_FILE\" \"/var/run/secrets/localstack-secrets/ca.crt\")\n      backup-restore-yaml)))\n\n(defn generate-secret [my-auth]\n  (let [{:keys [aws-access-key-id aws-secret-access-key restic-password]} my-auth]\n    (->\n     (yaml/from-string (yaml/load-resource \"backup/secret.yaml\"))\n     (cm/replace-key-value :aws-access-key-id (b64/encode aws-access-key-id))\n     (cm/replace-key-value :aws-secret-access-key (b64/encode aws-secret-access-key))\n     (cm/replace-key-value :restic-password (b64/encode restic-password)))))\n"]}