{"version":3,"sources":["orchestra/detail.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","p1__9704#","cljs.core/simple-symbol?","cljs.core.not_EQ_","cljs.spec.alpha/or-spec-impl","cljs.core/vector?","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep-impl","cljs.spec.alpha/maybe-impl","cljs.spec.alpha.every_impl","G__9718","cljs.core/ident?","G__9721","cljs.core/symbol?","G__9722","cljs.spec.alpha.tuple_impl","i__12976__auto__","v__12977__auto__","cljs.core.nth","cljs.core/map?","G__9723","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__9727","p1__9733#","cljs.core/qualified-keyword?","G__9747","fexpr__9746","cljs.core/name","G__9748","G__9766","cljs.core/coll?","cljs.spec.alpha/merge-spec-impl","p1__9782#","cljs.core/some?","cljs.core/string?","cljs.spec.alpha/alt-impl","cljs.spec.alpha/rep+impl","cljs.spec.alpha.spec_impl","orchestra.detail/*cljs?*","orchestra.detail/get-global-defn","orchestra.detail/spec-fn","fn-name","G__9863","cljs.core/Keyword","js/Error","G__9867","p__9869","vec__9870","orchestra.detail/render-binding","kind","value","G__9873","cljs.core.mapv","orchestra.detail/explode-arity","arity","args","cljs.core.get_in","rendered-args","cljs.core.comp","rendered-varargs","temp__5806__auto__","varargs","cljs.core.into","p__9875","map__9876","cljs.core/--destructure-map","exploded-args","cljs.core.get","exploded-body","orchestra.detail/render-arity","cljs.core/cons","orchestra.detail/extract-arg-specs","arg-specs","p__9877","map__9878","spec","cljs.core/List","arity-specs","cljs.core.conj","orchestra.detail/arg->kw","idx","arg","cljs.core/Symbol","cljs.core.keyword","orchestra.detail/build-cat","arity-arg-names","cljs.core.interleave","orchestra.detail/name-arity","arg-count","orchestra.detail/build-args-spec","conformed-arities","exploded-arities","cljs.core.sort_by","cljs.core/count","arg-names","cljs.core.map","cljs.core.map_indexed","arg-counts","cats","named-cats","cljs.core.mapcat","cljs.core/vector","cljs.core._EQ_","cljs.core/first","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","orchestra.detail/explode-def","seq9890","self__5755__auto__","cljs.core/seq","conformed","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","cljs.spec.alpha/conform","cljs.core/second","args-spec","cljs.core.merge","cljs.core/select-keys","orchestra.detail/defn-spec-helper","seq9893","cljs.core.sequence","cljs.core.concat","s-fdef","exploded","cljs.core.apply","stripped-meta","cljs.core.dissoc","or__5045__auto__"],"sourcesContent":["(ns orchestra.detail\n  (:require [#?(:clj clojure.spec.alpha\n                :cljs cljs.spec.alpha)\n             :as s]))\n\n;;;; destructure\n\n(s/def ::local-name (s/and simple-symbol? #(not= '& %)))\n\n(s/def ::binding-form\n  (s/or :sym ::local-name\n        :seq ::seq-binding-form\n        :map ::map-binding-form))\n\n;; sequential destructuring\n\n(s/def ::seq-binding-form\n  (s/and vector?\n         (s/cat :elems (s/* ::binding-form)\n                :rest (s/? (s/cat :amp #{'&} :form ::binding-form))\n                :as (s/? (s/cat :as #{:as} :sym ::local-name)))))\n\n;; map destructuring\n\n(s/def ::keys (s/coll-of ident? :kind vector?))\n(s/def ::syms (s/coll-of symbol? :kind vector?))\n(s/def ::strs (s/coll-of simple-symbol? :kind vector?))\n(s/def ::or (s/map-of simple-symbol? any?))\n(s/def ::as ::local-name)\n\n(s/def ::map-special-binding\n  (s/keys :opt-un [::as ::or ::keys ::syms ::strs]))\n\n(s/def ::map-binding (s/tuple ::binding-form any?))\n\n(s/def ::ns-keys\n  (s/tuple\n    (s/and qualified-keyword? #(-> % name #{\"keys\" \"syms\"}))\n    (s/coll-of simple-symbol? :kind vector?)))\n\n(s/def ::map-bindings\n  (s/every (s/or :mb ::map-binding\n                 :nsk ::ns-keys\n                 :msb (s/tuple #{:as :or :keys :syms :strs} any?)) :into {}))\n\n(s/def ::map-binding-form (s/merge ::map-bindings ::map-special-binding))\n\n(s/def ::spec (s/and some? #(not (string? %)))) ; TODO: Spec for specs\n(s/def ::args (s/and vector?\n                     (s/cat :args (s/* (s/cat :binding ::binding-form\n                                              :spec ::spec))\n                            :varargs (s/? (s/cat :amp #{'&}\n                                                 :form ::binding-form\n                                                 :spec ::spec)))))\n(s/def ::arity (s/cat :args ::args\n                      :body (s/* any?)))\n(s/def ::defn-spec-args (s/cat :name simple-symbol?\n                               :ret ::spec\n                               :docstring (s/? string?)\n                               :meta (s/? map?)\n                               :arities (s/alt :single ::arity\n                                               :multiple (s/+ (s/spec ::arity)))))\n\n(def ^:dynamic *cljs?* false)\n\n(defn get-global-defn []\n  'clojure.core/defn)\n\n(defn spec-fn [fn-name]\n  ; Can't use a map here, since these are macros.\n  (if *cljs?*\n    (case fn-name\n      ::spec 'cljs.spec.alpha/spec\n      ::cat 'cljs.spec.alpha/cat\n      ::or 'cljs.spec.alpha/or\n      ::fdef 'cljs.spec.alpha/fdef)\n    (case fn-name\n      ::spec 'clojure.spec.alpha/spec\n      ::cat 'clojure.spec.alpha/cat\n      ::or 'clojure.spec.alpha/or\n      ::fdef 'clojure.spec.alpha/fdef)))\n\n(defn render-binding\n  \"Doing the job of unform, since it turns destructured sequences into lists.\n   'cause it's silly.\"\n  [[kind value]]\n  (case kind\n    :sym value\n    :seq (mapv render-binding (:elems value))\n    :map value))\n\n(defn explode-arity\n  \"Strips the specs from the arity's args and gets it ready for consumption.\n   Does the job of s/unform, since s/unform doesn't do its job well.\"\n  [arity]\n  (let [args (get-in arity [:args :args])\n        rendered-args (mapv (comp render-binding :binding) args)\n        rendered-varargs (if-some [varargs (get-in arity [:args :varargs])]\n                           ['& (render-binding (:form varargs))]\n                           [])]\n    {::exploded-args (into rendered-args rendered-varargs)\n     ::exploded-body (:body arity)}))\n\n(defn render-arity\n  \"Turns an exploded arity into something which defn can consume.\"\n  [{:keys [::exploded-args ::exploded-body]}]\n  (cons exploded-args exploded-body))\n\n(defn extract-arg-specs\n  \"Returns a sequence of specs, based on the arity's args.\"\n  [arity]\n  (let [args (get-in arity [:args :args])\n        varargs (get-in arity [:args :varargs])\n        arg-specs (mapv (fn [{:keys [spec]}]\n                          ; We automatically wrap non-vararg specs in (s/spec).\n                          ; This ensure no regex specs flatten to apply to the\n                          ; fdef's outer :args s/cat.\n                          (list (spec-fn ::spec) spec))\n                        args)\n        arity-specs (if-some [varargs (get-in arity [:args :varargs])]\n                      (conj arg-specs (:spec varargs))\n                      arg-specs)]\n    arity-specs))\n\n(defn arg->kw\n  \"Converts are argument to a keyword. Arguments may use destructuring, so they\n   may not be a symbol. In that case, just fill in something helpful.\"\n  [idx arg]\n  (if (symbol? arg)\n    (keyword arg)\n    (keyword (str \"arg-\" idx))))\n\n(defn build-cat\n  [arity-arg-names arity-specs]\n  (cons (spec-fn ::cat) (interleave arity-arg-names arity-specs)))\n\n(defn name-arity\n  [arg-count]\n  (keyword (str \"arity-\" arg-count)))\n\n(defn build-args-spec\n  [conformed-arities exploded-arities]\n  (let [arg-specs (->> (mapv extract-arg-specs conformed-arities)\n                       (sort-by count)) ; Sort for consistency\n        arg-names (->> (map (fn [arity]\n                              (map-indexed arg->kw (::exploded-args arity)))\n                            exploded-arities)\n                       (sort-by count)) ; Sort for consistency\n        arg-counts (mapv count arg-specs)\n        cats (mapv build-cat arg-names arg-specs)\n        named-cats (mapcat vector (mapv name-arity arg-counts) cats)]\n    ; To keep specs as simple as possible, we avoid the s/or when there's only\n    ; a single arity. This is the typical case, so it's worth prefering\n    (if (= 1 (count arg-specs))\n      (first cats)\n      (cons (spec-fn ::or) named-cats))))\n\n(defn explode-def\n  \"Takes in the variadic values of a defn-spec and returns a map of the\n   various parts. Handles multiple arities and optional doc strings.\"\n  [& args]\n  (let [conformed (->> (s/assert ::defn-spec-args args)\n                       (s/conform ::defn-spec-args))\n        ; Single arity fns don't require surrounding parens. Conform them to\n        ; look like multiple arities before continuing.\n        conformed-arities (if (= :single (-> conformed :arities first))\n                            [(-> conformed :arities second)]\n                            (-> conformed :arities second))\n        exploded-arities (mapv explode-arity conformed-arities)\n        args-spec (build-args-spec conformed-arities exploded-arities)]\n    {::name (:name conformed)\n     ::doc (:docstring conformed)\n     ::meta (:meta conformed)\n     ::arities (map render-arity exploded-arities)\n     ::spec-map (merge (select-keys (:meta conformed) [:fn])\n                       (select-keys conformed [:ret])\n                       {:args args-spec})}))\n\n(defn defn-spec-helper [& args]\n  (let [s-fdef (spec-fn ::fdef)\n        exploded (apply explode-def args)\n        stripped-meta (dissoc (::meta exploded) :fn)]\n    `(do\n       (defn ~(::name exploded)\n         ~(or (::doc exploded) \"\")\n         ~(or stripped-meta {})\n         ~@(::arities exploded))\n       (~s-fdef ~(::name exploded)\n                :args ~(-> exploded ::spec-map :args)\n                :fn ~(-> exploded ::spec-map :fn)\n                :ret ~(-> exploded ::spec-map :ret)))))\n"]}