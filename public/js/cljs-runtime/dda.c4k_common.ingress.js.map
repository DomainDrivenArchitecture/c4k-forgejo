{"version":3,"sources":["dda/c4k_common/ingress.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","dda.c4k-common.predicate/letsencrypt-issuer?","cljs.core/string?","cljs.core/pos-int?","cljs.spec.alpha.every_impl","G__6165","cljs.core/coll?","dda.c4k-common.predicate/fqdn-string?","dda.c4k-common.ingress/simple-ingress?","cljs.spec.alpha/map-spec-impl","G__6168","cljs.core/map?","cljs.core/contains?","dda.c4k-common.ingress/ingress?","G__6177","dda.c4k-common.ingress/certificate?","G__6189","dda.c4k-common.ingress/ingress-defaults","dda.c4k-common.yaml/load-resource","resource-name","G__6194","js/Error","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","dda.c4k-common.ingress/generate-host-rule","dda.c4k-common.predicate/map-or-seq?","service-name","service-port","fqdn","dda.c4k-common.yaml/load-as-edn","dda.c4k-common.common/replace-all-matching-values-by-new-value","dda.c4k-common.ingress/generate-ingress","config","map__6196","cljs.core/--destructure-map","cljs.core.get","ingress-name","cert-name","fqdns","app-name","cljs.core/assoc-in","cljs.core.mapv","cljs.core.partial","dda.c4k-common.ingress/generate-certificate","map__6197","issuer","letsencrypt-issuer","cljs.core/name","cljs.core/first","dda.c4k-common.ingress/generate-ingress-and-cert","cljs.core/any?","simple-ingress-config","map__6198","cljs.core.merge"],"sourcesContent":["(ns dda.c4k-common.ingress\n  (:require\n   [clojure.spec.alpha :as s]\n   #?(:cljs [shadow.resource :as rc])\n   #?(:clj [orchestra.core :refer [defn-spec]]\n      :cljs [orchestra.core :refer-macros [defn-spec]])\n   #?(:clj [clojure.edn :as edn]\n      :cljs [cljs.reader :as edn])\n   [dda.c4k-common.yaml :as yaml]\n   [dda.c4k-common.common :as cm]\n   [dda.c4k-common.predicate :as pred]))\n\n(s/def ::issuer pred/letsencrypt-issuer?)\n(s/def ::service-name string?)\n(s/def ::app-name string?)\n(s/def ::ingress-name string?)\n(s/def ::cert-name string?)\n(s/def ::service-port pos-int?)\n(s/def ::fqdns (s/coll-of pred/fqdn-string?))\n\n(def simple-ingress? (s/keys :req-un [::fqdns ::service-name ::service-port]\n                             :opt-un [::issuer]))\n\n(def ingress? (s/keys :req-un [::fqdns ::app-name ::ingress-name ::service-name ::service-port]\n                      :opt-un [::issuer ::cert-name]))\n\n(def certificate? (s/keys :req-un [::fqdns ::app-name ::cert-name]\n                          :opt-un [::issuer]))\n\n(def ingress-defaults {:issuer \"staging\"})\n\n#?(:cljs\n   (defmethod yaml/load-resource :ingress [resource-name]\n     (case resource-name\n       \"ingress/host-rule.yaml\" (rc/inline \"ingress/host-rule.yaml\")\n       \"ingress/certificate.yaml\" (rc/inline \"ingress/certificate.yaml\")\n       \"ingress/ingress.yaml\" (rc/inline \"ingress/ingress.yaml\")\n       (throw (js/Error. \"Undefined Resource!\")))))\n\n(defn-spec generate-host-rule  pred/map-or-seq?\n  [service-name ::service-name\n   service-port ::service-port\n   fqdn pred/fqdn-string?]\n  (->\n   (yaml/load-as-edn \"ingress/host-rule.yaml\")\n   (cm/replace-all-matching-values-by-new-value \"FQDN\" fqdn)\n   (cm/replace-all-matching-values-by-new-value \"SERVICE_PORT\" service-port)\n   (cm/replace-all-matching-values-by-new-value \"SERVICE_NAME\" service-name)))\n\n(defn-spec generate-ingress pred/map-or-seq?\n  [config ingress?]\n  (let [{:keys [ingress-name cert-name service-name service-port fqdns app-name]} config]\n    (->\n     (yaml/load-as-edn \"ingress/ingress.yaml\")\n     (assoc-in [:metadata :name] ingress-name)\n     (assoc-in [:metadata :labels :app.kubernetes.part-of] app-name)\n     (assoc-in [:spec :tls 0 :secretName] cert-name)\n     (assoc-in [:spec :tls 0 :hosts] fqdns)\n     (assoc-in [:spec :rules] (mapv (partial generate-host-rule service-name service-port) fqdns)))))\n\n(defn-spec generate-certificate pred/map-or-seq?\n  [config certificate?]\n  (let [{:keys [cert-name issuer fqdns app-name]\n         :or {issuer \"staging\"}} config\n        letsencrypt-issuer (name issuer)]\n    (->\n     (yaml/load-as-edn \"ingress/certificate.yaml\")\n     (assoc-in [:metadata :name] cert-name)\n     (assoc-in [:metadata :labels :app.kubernetes.part-of] app-name)\n     (assoc-in [:spec :secretName] cert-name)\n     (assoc-in [:spec :commonName] (first fqdns))\n     (assoc-in [:spec :dnsNames] fqdns)\n     (assoc-in [:spec :issuerRef :name] letsencrypt-issuer))))\n\n(defn-spec generate-ingress-and-cert any?\n  [simple-ingress-config simple-ingress?]\n  (let [{:keys [service-name]} simple-ingress-config\n        config (merge {:app-name service-name\n                               :ingress-name service-name\n                               :cert-name service-name}\n                              ingress-defaults\n                              simple-ingress-config)]\n    [(generate-certificate config)\n     (generate-ingress config)]))"]}