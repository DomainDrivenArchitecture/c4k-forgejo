{"version":3,"sources":["dda/c4k_common/common.cljc"],"mappings":"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","names":["dda.c4k-common.common/bash-env-string?","input","cljs.core/not","cljs.core/re-matches","dda.c4k-common.common/fqdn-string?","dda.c4k-common.common/letsencrypt-issuer?","cljs.core/contains?","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","dda.c4k-common.common/replace-named-value","dda.c4k-common.predicate/map-or-seq?","coll","name","cljs.core/string?","value","dda.c4k-common.predicate/str-or-number?","p1__6160#","clojure.walk/postwalk","cljs.core/map?","cljs.core._EQ_","dda.c4k-common.common/replace-key-value","key","cljs.core/keyword?","p1__6161#","cljs.core.assoc","dda.c4k-common.common/replace-all-matching-values-by-new-value","value-to-match","value-to-replace","p1__6162#","cljs.core/type","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","dda.c4k-common.common/concat-vec","seq6164","self__5755__auto__","cljs.core/seq","cljs.core/vector?","vs","cljs.spec.alpha/rep-impl","dda.c4k-common.predicate/string-sequence?","cljs.core.into","cljs.core.apply","cljs.core/concat","dda.c4k-common.common/generate-common","my-config","my-auth","config-defaults","k8s-objects","resulting-config","cljs.core.merge","clojure.string.join"],"sourcesContent":["(ns dda.c4k-common.common\n  (:require\n   [clojure.walk]\n   [clojure.spec.alpha :as s]\n   [clojure.string :as cs]\n   #?(:clj [orchestra.core :refer [defn-spec]]\n      :cljs [orchestra.core :refer-macros [defn-spec]])\n   [dda.c4k-common.predicate :as cp]))\n\n;; deprecated functions were moved to dda.c4k-common.predicate\n(defn ^{:deprecated \"0.1\"} bash-env-string?\n  [input]\n  (and (string? input)\n       (not (re-matches #\".*['\\\"\\$]+.*\" input))))\n\n(defn ^{:deprecated \"0.1\"} fqdn-string?\n  [input]\n  (and (string? input)\n       (some? (re-matches #\"(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\\.)+[a-zA-Z]{2,63}$)\" input))))\n\n(defn ^{:deprecated \"0.1\"} letsencrypt-issuer?\n  [input]\n  (contains? #{:prod :staging} input))\n\n(defn-spec replace-named-value cp/map-or-seq?\n  [coll cp/map-or-seq?\n   name string?\n   value cp/str-or-number?]\n  (clojure.walk/postwalk #(if (and (map? %)\n                                   (= name (:name %)))\n                            {:name name :value value}\n                            %) \n                         coll))\n\n(defn-spec replace-key-value cp/map-or-seq?\n  [coll cp/map-or-seq?\n   key keyword?\n   value cp/str-or-number?]\n  (clojure.walk/postwalk #(if (and (map? %)\n                                   (contains? % key))\n                            (assoc % key value)\n                            %)\n                         coll))\n\n(defn-spec replace-all-matching-values-by-new-value cp/map-or-seq?\n  [coll cp/map-or-seq?\n   value-to-match string?\n   value-to-replace cp/str-or-number?]\n  (clojure.walk/postwalk #(if (and (= (type value-to-match) (type %))\n                                   (= value-to-match %))\n                            value-to-replace\n                            %) \n                         coll))\n\n(defn-spec concat-vec vector?\n  [& vs (s/* cp/string-sequence?)]\n  (into []\n        (apply concat vs)))\n\n(defn generate-common \n  [my-config \n   my-auth \n   config-defaults \n   k8s-objects]\n  (let [resulting-config (merge config-defaults my-config)]\n    (cs/join\n     \"\\n---\\n\"\n     (k8s-objects resulting-config my-auth))))\n"]}