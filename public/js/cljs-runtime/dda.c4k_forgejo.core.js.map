{"version":3,"sources":["dda/c4k_forgejo/core.cljc"],"mappings":"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","names":["dda.c4k-forgejo.core/config-defaults","dda.c4k-forgejo.core/config?","cljs.spec.alpha/map-spec-impl","G__6262","cljs.core/map?","cljs.core/contains?","dda.c4k-forgejo.core/auth?","G__6263","dda.c4k-forgejo.core/vol?","G__6265","dda.c4k-forgejo.core/k8s-objects","config","auth","storage-class","cljs.core.map","dda.c4k-common.yaml/to-string","p1__6266#","cljs.core.filter","dda.c4k_common.common.concat_vec","dda.c4k_common.postgres.generate_config","dda.c4k-common.postgres/generate-secret","dda.c4k-common.postgres/generate-persistent-volume","cljs.core/select-keys","dda.c4k-common.postgres/generate-pvc","dda.c4k_common.postgres.generate_deployment","dda.c4k-common.postgres/generate-service","dda.c4k-forgejo.forgejo/generate-deployment","dda.c4k-forgejo.forgejo/generate-service","dda.c4k-forgejo.forgejo/generate-service-ssh","dda.c4k-forgejo.forgejo/generate-data-volume","dda.c4k-forgejo.forgejo/generate-appini-env","dda.c4k-forgejo.forgejo/generate-secrets","dda.c4k-forgejo.forgejo/generate-ingress-and-cert","dda.c4k-forgejo.backup/generate-config","dda.c4k-forgejo.backup/generate-secret","dda.c4k-forgejo.backup/generate-cron","dda.c4k-forgejo.backup/generate-backup-restore-deployment","dda.c4k-common.monitoring/generate"],"sourcesContent":["(ns dda.c4k-forgejo.core\n (:require\n  [clojure.spec.alpha :as s]\n  [dda.c4k-common.yaml :as yaml]\n  [dda.c4k-common.common :as cm]\n  [dda.c4k-common.monitoring :as mon]\n  [dda.c4k-forgejo.forgejo :as forgejo]\n  [dda.c4k-forgejo.backup :as backup]\n  [dda.c4k-common.postgres :as postgres]))\n\n(def config-defaults {:issuer \"staging\"})\n\n(def config? (s/keys :req-un [::forgejo/fqdn \n                              ::forgejo/deploy-federated\n                              ::forgejo/mailer-from \n                              ::forgejo/mailer-host \n                              ::forgejo/mailer-port\n                              ::forgejo/service-noreply-address]\n                     :opt-un [::forgejo/issuer \n                              ::forgejo/default-app-name \n                              ::forgejo/service-domain-whitelist\n                              ::backup/restic-repository\n                              ::mon/mon-cfg]))\n\n(def auth? (s/keys :req-un [::postgres/postgres-db-user ::postgres/postgres-db-password\n                            ::forgejo/mailer-user ::forgejo/mailer-pw\n                            ::backup/aws-access-key-id ::backup/aws-secret-access-key]\n                   :opt-un [::backup/restic-password ; TODO gec: Is restic password opt or req?\n                            ::mon/mon-cfg]))\n\n(def vol? (s/keys :req-un [::forgejo/volume-total-storage-size]))\n\n(defn k8s-objects [config auth]\n  (let [storage-class (if (contains? config :postgres-data-volume-path) :manual :local-path)]\n    (map yaml/to-string\n         (filter #(not (nil? %))\n                 (cm/concat-vec\n                  [(postgres/generate-config {:postgres-size :2gb :db-name \"forgejo\"})\n                   (postgres/generate-secret auth)\n                   (when (contains? config :postgres-data-volume-path)\n                     (postgres/generate-persistent-volume (select-keys config [:postgres-data-volume-path :pv-storage-size-gb])))\n                   (postgres/generate-pvc {:pv-storage-size-gb 5\n                                           :pvc-storage-class-name storage-class})\n                   (postgres/generate-deployment {:postgres-image \"postgres:14\"\n                                                  :postgres-size :2gb})\n                   (postgres/generate-service)\n                   (forgejo/generate-deployment config)\n                   (forgejo/generate-service)\n                   (forgejo/generate-service-ssh)                   \n                   (forgejo/generate-data-volume config)\n                   (forgejo/generate-appini-env config)\n                   (forgejo/generate-secrets auth)] \n                  (forgejo/generate-ingress-and-cert config)\n                  (when (contains? config :restic-repository)\n                    [(backup/generate-config config)\n                     (backup/generate-secret auth)\n                     (backup/generate-cron)\n                     (backup/generate-backup-restore-deployment config)])\n                  (when (:contains? config :mon-cfg)\n                    (mon/generate (:mon-cfg config) (:mon-auth auth))))))))\n"]}