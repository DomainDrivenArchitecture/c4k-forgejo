{"version":3,"sources":["dda/c4k_forgejo/forgejo.cljc"],"mappings":"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","names":["dda.c4k-forgejo.forgejo/domain-list?","input","clojure.string/blank?","dda.c4k-common.predicate/string-of-separated-by?","dda.c4k-common.predicate/fqdn-string?","dda.c4k-forgejo.forgejo/boolean-from-string","cljs.core._EQ_","dda.c4k-forgejo.forgejo/boolean-string?","cljs.core/boolean?","cljs.spec.alpha/def-impl","cljs.core/string?","dda.c4k-common.predicate/bash-env-string?","dda.c4k-common.predicate/letsencrypt-issuer?","cljs.core.partial","dda.c4k-common.predicate/int-gt-n?","dda.c4k-forgejo.forgejo/config-defaults","dda.c4k-forgejo.forgejo/config?","cljs.spec.alpha/map-spec-impl","G__6253","cljs.core/map?","cljs.core/contains?","dda.c4k-forgejo.forgejo/auth?","G__6254","dda.c4k-forgejo.forgejo/vol?","G__6255","dda.c4k-forgejo.forgejo/data-storage-by-volume-size","total","dda.c4k-forgejo.forgejo/federated-image-name","dda.c4k-forgejo.forgejo/non-federated-image-name","dda.c4k-common.yaml/load-resource","resource-name","G__6256","js/Error","dda.c4k-forgejo.forgejo/generate-appini-env","config","map__6257","cljs.core/--destructure-map","cljs.core.get","default-app-name","deploy-federated","fqdn","mailer-from","mailer-host","mailer-port","service-domain-whitelist","service-noreply-address","deploy-federated-bool","dda.c4k-common.yaml/load-as-edn","dda.c4k-common.common/replace-all-matching-values-by-new-value","dda.c4k-forgejo.forgejo/generate-secrets","auth","map__6258","postgres-db-user","postgres-db-password","mailer-user","mailer-pw","dda.c4k-common.base64/encode","dda.c4k-forgejo.forgejo/generate-ingress-and-cert","map__6259","dda.c4k-common.ingress/generate-ingress-and-cert","cljs.core.merge","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","dda.c4k-forgejo.forgejo/generate-data-volume","dda.c4k-common.predicate/map-or-seq?","map__6260","volume-total-storage-size","data-storage-size","dda.c4k-forgejo.forgejo/generate-deployment","map__6261","dda.c4k-forgejo.forgejo/generate-service","dda.c4k-forgejo.forgejo/generate-service-ssh"],"sourcesContent":["(ns dda.c4k-forgejo.forgejo\n  (:require\n   [clojure.spec.alpha :as s]\n   [clojure.string :as st]\n   #?(:cljs [shadow.resource :as rc])\n   #?(:clj [orchestra.core :refer [defn-spec]]\n      :cljs [orchestra.core :refer-macros [defn-spec]])\n   #?(:clj [clojure.edn :as edn]\n      :cljs [cljs.reader :as edn])\n   [dda.c4k-common.yaml :as yaml]\n   [dda.c4k-common.common :as cm]\n   [dda.c4k-common.ingress :as ing]\n   [dda.c4k-common.base64 :as b64]\n   [dda.c4k-common.predicate :as pred]\n   [dda.c4k-common.postgres :as postgres]))\n\n(defn domain-list?\n  [input]\n  (or\n   (st/blank? input)\n   (pred/string-of-separated-by? pred/fqdn-string? #\",\" input)))\n\n(defn boolean-from-string [input]\n  (cond\n    (= input \"true\") true\n    (= input \"false\") false\n    :else nil))\n\n(defn boolean-string?\n  [input]\n  (and\n   (string? input)\n   (boolean? (boolean-from-string input))))\n\n(s/def ::default-app-name string?)\n(s/def ::fqdn pred/fqdn-string?)\n(s/def ::deploy-federated boolean-string?)\n(s/def ::mailer-from pred/bash-env-string?)\n(s/def ::mailer-host pred/bash-env-string?)\n(s/def ::mailer-port pred/bash-env-string?)\n(s/def ::service-domain-whitelist domain-list?)\n(s/def ::service-noreply-address string?)\n(s/def ::mailer-user pred/bash-env-string?)\n(s/def ::mailer-pw pred/bash-env-string?)\n(s/def ::issuer pred/letsencrypt-issuer?)\n(s/def ::volume-total-storage-size (partial pred/int-gt-n? 5))\n\n(def config-defaults {:issuer \"staging\"})\n\n(def config? (s/keys :req-un [::fqdn\n                              ::deploy-federated\n                              ::mailer-from\n                              ::mailer-host\n                              ::mailer-port\n                              ::service-noreply-address]\n                     :opt-un [::issuer\n                              ::default-app-name\n                              ::service-domain-whitelist]))\n\n(def auth? (s/keys :req-un [::postgres/postgres-db-user ::postgres/postgres-db-password ::mailer-user ::mailer-pw]))\n\n(def vol? (s/keys :req-un [::volume-total-storage-size]))\n\n(defn data-storage-by-volume-size\n  [total]\n  total)\n\n(def federated-image-name \"codeberg.org/meissa/forgejo:federated-latest\")\n(def non-federated-image-name \"codeberg.org/forgejo/forgejo:1.19\")\n\n#?(:cljs\n   (defmethod yaml/load-resource :forgejo [resource-name]\n     (case resource-name\n       \"forgejo/appini-env-configmap.yaml\" (rc/inline \"forgejo/appini-env-configmap.yaml\")\n       \"forgejo/deployment.yaml\" (rc/inline \"forgejo/deployment.yaml\")\n       \"forgejo/secrets.yaml\" (rc/inline \"forgejo/secrets.yaml\")\n       \"forgejo/service.yaml\" (rc/inline \"forgejo/service.yaml\")\n       \"forgejo/service-ssh.yaml\" (rc/inline \"forgejo/service-ssh.yaml\")       \n       \"forgejo/datavolume.yaml\" (rc/inline \"forgejo/datavolume.yaml\")\n       (throw (js/Error. \"Undefined Resource!\")))))\n\n(defn generate-appini-env\n  [config]\n  (let [{:keys [default-app-name\n                deploy-federated\n                fqdn\n                mailer-from\n                mailer-host\n                mailer-port\n                service-domain-whitelist\n                service-noreply-address]\n         :or {default-app-name \"forgejo instance\"\n              service-domain-whitelist fqdn}} config\n        deploy-federated-bool (boolean-from-string deploy-federated)]\n    (->\n     (yaml/load-as-edn \"forgejo/appini-env-configmap.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"APPNAME\" default-app-name)\n     (cm/replace-all-matching-values-by-new-value \"FQDN\" fqdn)\n     (cm/replace-all-matching-values-by-new-value \"URL\" (str \"https://\" fqdn))\n     (cm/replace-all-matching-values-by-new-value \"FROM\" mailer-from)\n     (cm/replace-all-matching-values-by-new-value \"MAILERHOST\" mailer-host)\n     (cm/replace-all-matching-values-by-new-value \"MAILERPORT\" mailer-port)\n     (cm/replace-all-matching-values-by-new-value \"WHITELISTDOMAINS\" service-domain-whitelist)\n     (cm/replace-all-matching-values-by-new-value \"NOREPLY\" service-noreply-address)\n     (cm/replace-all-matching-values-by-new-value \"IS_FEDERATED\" \n                                                  (if deploy-federated-bool\n                                                    \"true\"\n                                                    \"false\")))))\n\n(defn generate-secrets\n  [auth]\n  (let [{:keys [postgres-db-user \n                postgres-db-password \n                mailer-user \n                mailer-pw]} auth]\n    (->\n     (yaml/load-as-edn \"forgejo/secrets.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"DBUSER\" (b64/encode postgres-db-user))\n     (cm/replace-all-matching-values-by-new-value \"DBPW\" (b64/encode postgres-db-password))\n     (cm/replace-all-matching-values-by-new-value \"MAILERUSER\" (b64/encode mailer-user))\n     (cm/replace-all-matching-values-by-new-value \"MAILERPW\" (b64/encode mailer-pw)))))\n\n(defn generate-ingress-and-cert\n  [config]\n  (let [{:keys [fqdn]} config]\n    (ing/generate-ingress-and-cert\n     (merge\n      {:service-name \"forgejo-service\"\n       :service-port 3000\n       :fqdns [fqdn]}\n      config))))\n\n(defn-spec generate-data-volume pred/map-or-seq?\n  [config vol?]\n  (let [{:keys [volume-total-storage-size]} config        \n        data-storage-size (data-storage-by-volume-size volume-total-storage-size)]\n    (->     \n     (yaml/load-as-edn \"forgejo/datavolume.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"DATASTORAGESIZE\" (str (str data-storage-size) \"Gi\")))))\n\n(defn-spec generate-deployment pred/map-or-seq?\n  [config config?]\n  (let [{:keys [deploy-federated]} config\n        deploy-federated-bool (boolean-from-string deploy-federated)]\n    (->\n     (yaml/load-as-edn \"forgejo/deployment.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"IMAGE_NAME\" \n                                                  (if deploy-federated-bool\n                                                    federated-image-name\n                                                    non-federated-image-name)))))\n\n(defn generate-service\n  []\n  (yaml/load-as-edn \"forgejo/service.yaml\"))\n\n(defn generate-service-ssh\n  []\n  (yaml/load-as-edn \"forgejo/service-ssh.yaml\"))\n"]}