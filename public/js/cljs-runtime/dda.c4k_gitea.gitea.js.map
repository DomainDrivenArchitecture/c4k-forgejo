{"version":3,"sources":["dda/c4k_gitea/gitea.cljc"],"mappings":"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","names":["dda.c4k-gitea.gitea/domain-list?","input","clojure.string/blank?","dda.c4k-common.predicate/string-of-separated-by?","dda.c4k-common.predicate/fqdn-string?","cljs.spec.alpha/def-impl","cljs.core/string?","dda.c4k-common.predicate/bash-env-string?","dda.c4k-common.predicate/host-and-port-string?","dda.c4k-common.predicate/letsencrypt-issuer?","cljs.core.partial","dda.c4k-common.predicate/int-gt-n?","dda.c4k-gitea.gitea/config-defaults","dda.c4k-gitea.gitea/config?","cljs.spec.alpha/map-spec-impl","G__10337","cljs.core/map?","cljs.core/contains?","dda.c4k-gitea.gitea/auth?","G__10353","dda.c4k-gitea.gitea/vol?","G__10367","dda.c4k-gitea.gitea/data-storage-by-volume-size","total","dda.c4k-common.yaml/load-resource","resource-name","G__10371","js/Error","dda.c4k-common.yaml/load-as-edn","dda.c4k-common.yaml/from-string","dda.c4k-gitea.gitea/generate-appini-env","config","map__10382","cljs.core/--destructure-map","cljs.core.get","default-app-name","fqdn","mailer-from","mailer-host-port","service-domain-whitelist","service-noreply-address","dda.c4k-common.common/replace-all-matching-values-by-new-value","dda.c4k-gitea.gitea/generate-secrets","auth","map__10386","postgres-db-user","postgres-db-password","mailer-user","mailer-pw","dda.c4k-common.base64/encode","dda.c4k-gitea.gitea/generate-ingress","map__10390","dda.c4k-gitea.gitea/generate-certificate","map__10396","issuer","letsencrypt-issuer","cljs.core/name","cljs.core/assoc-in","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","dda.c4k-gitea.gitea/generate-data-volume","dda.c4k-common.predicate/map-or-seq?","map__10400","volume-total-storage-size","data-storage-size","dda.c4k-gitea.gitea/generate-deployment","dda.c4k-gitea.gitea/generate-service","dda.c4k-gitea.gitea/generate-service-ssh"],"sourcesContent":["(ns dda.c4k-gitea.gitea\n  (:require\n   [clojure.spec.alpha :as s]\n   [clojure.string :as st]\n   #?(:cljs [shadow.resource :as rc])\n   #?(:clj [orchestra.core :refer [defn-spec]]\n      :cljs [orchestra.core :refer-macros [defn-spec]])\n   #?(:clj [clojure.edn :as edn]\n      :cljs [cljs.reader :as edn])\n   [dda.c4k-common.yaml :as yaml]\n   [dda.c4k-common.common :as cm]\n   [dda.c4k-common.base64 :as b64]\n   [dda.c4k-common.predicate :as pred]\n   [dda.c4k-common.postgres :as postgres]))\n\n(defn domain-list?\n  [input]\n  (or\n   (st/blank? input)\n   (pred/string-of-separated-by? pred/fqdn-string? #\",\" input)))\n\n(s/def ::default-app-name string?)\n(s/def ::fqdn pred/fqdn-string?)\n(s/def ::mailer-from pred/bash-env-string?)\n(s/def ::mailer-host-port pred/host-and-port-string?)\n(s/def ::service-domain-whitelist domain-list?)\n(s/def ::service-noreply-address string?)\n(s/def ::mailer-user pred/bash-env-string?)\n(s/def ::mailer-pw pred/bash-env-string?)\n(s/def ::issuer pred/letsencrypt-issuer?)\n(s/def ::volume-total-storage-size (partial pred/int-gt-n? 5))\n\n(def config-defaults {:issuer \"staging\"})\n\n(def config? (s/keys :req-un [::fqdn \n                              ::mailer-from \n                              ::mailer-host-port \n                              ::service-noreply-address]\n                     :opt-un [::issuer \n                              ::default-app-name \n                              ::service-domain-whitelist]))\n\n(def auth? (s/keys :req-un [::postgres/postgres-db-user ::postgres/postgres-db-password ::mailer-user ::mailer-pw]))\n\n(def vol? (s/keys :req-un [::volume-total-storage-size]))\n\n(defn data-storage-by-volume-size\n  [total]\n  total)\n\n\n#?(:cljs\n   (defmethod yaml/load-resource :gitea [resource-name]\n     (case resource-name\n       \"gitea/appini-env-configmap.yaml\" (rc/inline \"gitea/appini-env-configmap.yaml\")\n       \"gitea/deployment.yaml\" (rc/inline \"gitea/deployment.yaml\")\n       \"gitea/certificate.yaml\" (rc/inline \"gitea/certificate.yaml\")\n       \"gitea/ingress.yaml\" (rc/inline \"gitea/ingress.yaml\")\n       \"gitea/secrets.yaml\" (rc/inline \"gitea/secrets.yaml\")\n       \"gitea/service.yaml\" (rc/inline \"gitea/service.yaml\")\n       \"gitea/service-ssh.yaml\" (rc/inline \"gitea/service-ssh.yaml\")       \n       \"gitea/datavolume.yaml\" (rc/inline \"gitea/datavolume.yaml\")\n       (throw (js/Error. \"Undefined Resource!\")))))\n\n#?(:cljs\n   (defmethod yaml/load-as-edn :gitea [resource-name]\n     (yaml/from-string (yaml/load-resource resource-name))))\n\n(defn generate-appini-env\n  [config]\n  (let [{:keys [default-app-name\n                fqdn\n                mailer-from\n                mailer-host-port\n                service-domain-whitelist\n                service-noreply-address]\n         :or {default-app-name \"Gitea instance\"\n              service-domain-whitelist fqdn}}\n        config]\n    (->\n     (yaml/load-as-edn \"gitea/appini-env-configmap.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"APPNAME\" default-app-name)\n     (cm/replace-all-matching-values-by-new-value \"FQDN\" fqdn)\n     (cm/replace-all-matching-values-by-new-value \"URL\" (str \"https://\" fqdn))\n     (cm/replace-all-matching-values-by-new-value \"FROM\" mailer-from)\n     (cm/replace-all-matching-values-by-new-value \"HOSTANDPORT\" mailer-host-port)\n     (cm/replace-all-matching-values-by-new-value \"WHITELISTDOMAINS\" service-domain-whitelist)\n     (cm/replace-all-matching-values-by-new-value \"NOREPLY\" service-noreply-address))))\n\n(defn generate-secrets\n  [auth]\n  (let [{:keys [postgres-db-user \n                postgres-db-password \n                mailer-user \n                mailer-pw]} auth]\n    (->\n     (yaml/load-as-edn \"gitea/secrets.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"DBUSER\" (b64/encode postgres-db-user))\n     (cm/replace-all-matching-values-by-new-value \"DBPW\" (b64/encode postgres-db-password))\n     (cm/replace-all-matching-values-by-new-value \"MAILERUSER\" (b64/encode mailer-user))\n     (cm/replace-all-matching-values-by-new-value \"MAILERPW\" (b64/encode mailer-pw)))))\n\n(defn generate-ingress\n  [config]\n  (let [{:keys [fqdn]} config]\n    (->\n     (yaml/load-as-edn \"gitea/ingress.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"FQDN\" fqdn))))\n\n(defn generate-certificate\n  [config]\n  (let [{:keys [fqdn issuer]\n         :or {issuer \"staging\"}} config\n        letsencrypt-issuer (name issuer)]\n    (->\n     (yaml/load-as-edn \"gitea/certificate.yaml\")\n     (assoc-in [:spec :issuerRef :name] letsencrypt-issuer)\n     (cm/replace-all-matching-values-by-new-value \"FQDN\" fqdn))))\n\n(defn-spec generate-data-volume pred/map-or-seq?\n  [config vol?]\n  (let [{:keys [volume-total-storage-size]} config        \n        data-storage-size (data-storage-by-volume-size volume-total-storage-size)]\n    (->     \n     (yaml/load-as-edn \"gitea/datavolume.yaml\")\n     (cm/replace-all-matching-values-by-new-value \"DATASTORAGESIZE\" (str (str data-storage-size) \"Gi\")))))\n\n(defn generate-deployment\n  []\n  (yaml/load-as-edn \"gitea/deployment.yaml\"))\n\n(defn generate-service\n  []\n  (yaml/load-as-edn \"gitea/service.yaml\"))\n\n(defn generate-service-ssh\n  []\n  (yaml/load-as-edn \"gitea/service-ssh.yaml\"))\n"]}