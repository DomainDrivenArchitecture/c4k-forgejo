kind: Service
apiVersion: v1
metadata:
  name: forgejo-runner-service
  namespace: forgejo
spec:
  selector:
    app: forgejo-runner
  ports:
    - name: forgejo-http
      port: 80
---
# Secret data.
# You will need to retrieve this from the web UI, and your Forgejo instance must be running v1.21+
# Alternatively, create this with
# kubectl create secret generic runner-secret --from-literal=token=your_offline_token_here
apiVersion: v1
kind: Secret
metadata:
  name: runner-secret
  namespace: forgejo
stringData:
  token: replace_me # TODO: Proper secret handling once working confirmed
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: forgejo-runner-config
  namespace: forgejo
  labels:
    app: forgejo-runner
data:
  config.yaml: |-
    log:
    # The level of logging, can be trace, debug, info, warn, error, fatal
    level: info
    # The level of logging for jobs, can be trace, debug, info, earn, error, fatal
    job_level: info

    runner:
      # Where to store the registration result.
      file: .runner
      # Execute how many tasks concurrently at the same time.
      capacity: 1
      # Extra environment variables to run jobs.
      envs:
        DOCKER_HOST: tcp://localhost:2376
        DOCKER_TLS_VERIFY: 0
        DOCKER_CERT_PATH: /certs/client
        #A_TEST_ENV_NAME_2: a_test_env_value_2
      # Extra environment variables to run jobs from a file.
      # It will be ignored if it's empty or the file doesn't exist.
      env_file: .env
      # The timeout for a job to be finished.
      # Please note that the Forgejo instance also has a timeout (3h by default) for the job.
      # So the job could be stopped by the Forgejo instance if it's timeout is shorter than this.
      timeout: 3h
      # The timeout for the runner to wait for running jobs to finish when
      # shutting down because a TERM or INT signal has been received.  Any
      # running jobs that haven't finished after this timeout will be
      # cancelled.
      # If unset or zero the jobs will be cancelled immediately.
      shutdown_timeout: 3h
      # Whether skip verifying the TLS certificate of the instance.
      insecure: false
      # The timeout for fetching the job from the Forgejo instance.
      fetch_timeout: 5s
      # The interval for fetching the job from the Forgejo instance.
      fetch_interval: 2s
      # The interval for reporting the job status and logs to the Forgejo instance.
      report_interval: 1s
      # The labels of a runner are used to determine which jobs the runner can run, and how to run them.
      # Like: ["macos-arm64:host", "ubuntu-latest:docker://node:20-bookworm", "ubuntu-22.04:docker://node:20-bookworm"]
      # If it's empty when registering, it will ask for inputting labels.
      # If it's empty when executing the `daemon`, it will use labels in the `.runner` file.
      labels: []

    cache:
      # Enable cache server to use actions/cache.
      enabled: true
      # The directory to store the cache data.
      # If it's empty, the cache data will be stored in $HOME/.cache/actcache.
      dir: ""
      # The host of the cache server.
      # It's not for the address to listen, but the address to connect from job containers.
      # So 0.0.0.0 is a bad choice, leave it empty to detect automatically.
      host: ""
      # The port of the cache server.
      # 0 means to use a random available port.
      port: 0
      # The port of the cache proxy.
      # 0 means to use a random available port.
      proxy_port: 0
      # The external cache server URL. Valid only when enable is true.
      # If it's specified, it will be used to set the ACTIONS_CACHE_URL environment variable. The URL should generally end with "/".
      # Otherwise it will be set to the the URL of the internal cache server.
      external_server: ""
      # The shared cache secret. When communicating with a cache server, the runner uses this secret to verify the authenticity of the cache requests.
      # When using an external cache server it is required to set the same secret for the runner and the cache server.
      secret: ""
      # Overrides the ACTIONS_CACHE_URL passed to workflow containers. This should only be used if the runner host is not reachable from the
      # workflow containers, and requires further setup.
      actions_cache_url_override: ""

    container:
      # Specifies the network to which the container will connect.
      # Could be host, bridge or the name of a custom network.
      # If it's empty, create a network automatically.
      network: host
      # Whether to create networks with IPv6 enabled. Requires the Docker daemon to be set up accordingly.
      # Only takes effect if "network" is set to "".
      enable_ipv6: false
      # Whether to use privileged mode or not when launching task containers (privileged mode is required for Docker-in-Docker).
      privileged: false
      # And other options to be used when the container is started (eg, --volume /etc/ssl/certs:/etc/ssl/certs:ro).
      options:
        -v /certs/client:/certs/client
      # The parent directory of a job's working directory.
      # If it's empty, /workspace will be used.
      workdir_parent:
      # Volumes (including bind mounts) can be mounted to containers. Glob syntax is supported, see https://github.com/gobwas/glob
      # You can specify multiple volumes. If the sequence is empty, no volumes can be mounted.
      # For example, if you only allow containers to mount the `data` volume and all the json files in `/src`, you should change the config to:
      valid_volumes:
          - /certs/client
      # If you want to allow any volume, please use the following configuration:
      # valid_volumes:
      #   - '**'
      # overrides the docker client host with the specified one.
      # If "-" or "", an available docker host will automatically be found.
      # If "automount", an available docker host will automatically be found and mounted in the job container (e.g. /var/run/docker.sock).
      # Otherwise the specified docker host will be used and an error will be returned if it doesn't work.
      docker_host: "-"
      # Pull docker image(s) even if already present
      force_pull: false
      # Rebuild local docker image(s) even if already present
      force_rebuild: false

    host:
      # The parent directory of a job's working directory.
      # If it's empty, $HOME/.cache/act/ will be used.
      workdir_parent:
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: forgejo-runner
  namespace: forgejo
  labels:
    app: forgejo-runner
    app.kubernetes.io/component: forgejo-runner
    app.kubernetes.io/instance: forgejo-runner
    app.kubernetes.io/name: forgejo-runner
spec:
  replicas: 2
  selector:
    matchLabels:
      app: forgejo-runner
  template:
    metadata:
      name: forgejo-runner
      labels:
        app: forgejo-runner
        app.kubernetes.io/component: forgejo-runner
        app.kubernetes.io/instance: forgejo-runner
        app.kubernetes.io/name: forgejo-runner
    spec:
      automountServiceAccountToken: false
      restartPolicy: Always
      containers:
        - name: runner
          image: code.forgejo.org/forgejo/runner:7.0.0
          command:
            - /bin/bash
            - -c
          args:
            - |
              while ! nc -z localhost 2376 </dev/null ; do
                echo 'waiting for docker daemon...' ;
                sleep 5 ;
                done ;
              echo "Done starting runner, registering"
              forgejo-runner create-runner-file --secret ${RUNNER_TOKEN} --name ${RUNNER_NAME} --instance ${FORGEJO_INSTANCE_URL};
              echo "=== Conf Dir ==="
              echo $(ls -la /conf)
              echo "Done registering, starting runner"
              forgejo-runner --config /conf/config.yaml daemon
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2376
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: '0'
            - name: RUNNER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: runner-secret
                  key: token
            - name: RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: FORGEJO_INSTANCE_URL
              value: http://forgejo-service:3000
          resources:
            limits:
              cpu: '1'
              ephemeral-storage: 3Gi
              memory: 4Gi
            requests:
              cpu: 100m
              ephemeral-storage: '0'
              memory: 64Mi
          volumeMounts:
            - name: docker-certs
              mountPath: /certs
            - name: runner-data
              mountPath: /data
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /conf
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          ports:
            - containerPort: 80
              name: runner-port
        - name: daemon
          image: docker.io/docker:28.3.0-dind
          env:
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          resources:
            limits:
              cpu: '1'
              ephemeral-storage: 3Gi
              memory: 4Gi
            requests:
              cpu: 100m
              ephemeral-storage: '0'
              memory: 64Mi
          securityContext:
            privileged: true
          volumeMounts:
            - name: docker-certs
              mountPath: /certs
      volumes:
        - name: config
          configMap:
            name: forgejo-runner-config
        - name: docker-certs
          emptyDir: {}
        - name: runner-data
          emptyDir: {}
        - name: tmp
          emptyDir: {}