apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: forgejo-runner
  name: forgejo-runner
spec:
  # Two replicas means that if one is busy, the other can pick up jobs.
  replicas: 1
  selector:
    matchLabels:
      app: forgejo-runner
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: forgejo-runner
    spec:
      restartPolicy: Always
      volumes:
      - name: docker-certs
        emptyDir: {}
      - name: runner-data
        emptyDir: {}
      - name: config
        configMap:
          name: forgejo-runner-config
      initContainers:
      - name: runner-config-generation
        image: code.forgejo.org/forgejo/runner:7.0.0
        #command: [ "forgejo-runner", "create-runner-file", "--instance", "$(FORGEJO_INSTANCE_URL)", "--secret", "$(RUNNER_SECRET)", "--connect" ]
        command: [ "forgejo-runner", "register", "--no-interactive", "--token", "$(RUNNER_SECRET)", "--name", "vinland", "--instance", "$(FORGEJO_INSTANCE_URL)", "--labels", "self-hosted,docker"]
        env:
        - name: RUNNER_SECRET
          valueFrom:
            secretKeyRef:
              name: runner-secret
              key: token
        - name: FORGEJO_INSTANCE_URL
          value: https://codeberg.org
        volumeMounts:
        - name: runner-data
          mountPath: /data
      containers:
      - name: runner
        image: code.forgejo.org/forgejo/runner:7.0.0
        command: ["sh", "-c", "while ! nc -z localhost 2376 </dev/null; do echo 'waiting for docker daemon...'; sleep 5; done; forgejo-runner daemon --config config.yaml"]
        env:
        - name: DOCKER_HOST
          value: tcp://localhost:2376
        - name: DOCKER_CERT_PATH
          value: /certs/client
        - name: DOCKER_TLS_VERIFY
          value: "1"
        volumeMounts:
        - name: docker-certs
          mountPath: /certs
        - name: runner-data
          mountPath: /data
        - name: config
          mountPath: /data/config.yaml
          subPath: "config.yaml"
      - name: daemon
        image: docker:23.0.6-dind
        env:
        - name: DOCKER_TLS_CERTDIR
          value: /certs
        securityContext:
          privileged: true
        volumeMounts:
        - name: docker-certs
          mountPath: /certs